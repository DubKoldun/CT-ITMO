#!/usr/bin/perl

my $file = "3.3.txt";
open FILE, $file;
$u = '\w\d\-\_\.\~\%';
@ve;
$e = '\s*';

while ($str = <>) {
    if ($str =~ /<$e(a)(.*)href$e=$e"(?<scheme>([^:]+:)\/\/)?(?<host>\w+.*?)[\"\/\:](.*)>/) {
        # also works
        # /<$e(a)(.+?)href$e=$e\"(([^:]+:)\/\/)?(?<host>\w+.*?)('|"|\/|:)(.*)>/
        # /<$e(a)(.+?)href$e=$e["'](([a-z][a-z0-9\+\-\.]+:)\/\/)?(?<host>\w+.*?)('|"|\/|:)(.*)>/i
        # /<$e([aA])(.*)href$e=$e["'](([a-z][a-z0-9\+\-\.]+:)\/\/)?(?<host>\w+.*?)('|"|\/|:)(.*)>/i
        # не имеет значения дерево разбора по ссылке. user_info там не используется. можете его написать
        # /<$e(a)(.*)href$e=$e"(([^:]+:)\/\/)?(?<user_info>.*?@)?(?<host>\w+.*?)[\"\/\:](.*)>/
        # examples of user_info:
        # (?<userinfo>[a-zA-Z0-9\-\.\_\~|%\d{2}|\!\$\&\'\(\)\*\+\,\;\=|\:]*@)?
        # (?<user_info>.*?@)?
        # также не имеет значения разбор scheme. главное - его хоть как-то обрабатывать:
        #  examples of scheme:
        # (?<scheme>\w[\w\d+\+\-\.]*\:(\/\/))?
        # (?<scheme>[a-zA-Z][a-zA-Z0-9\+\-\.]*://)?
        # все, что после $+{host}[\:\'\"\/] можно обернуть в (.*) -> дальнейшее дерево вообще не рассматривается
        # единственная сложность составляет в том, как парсить host:
        # wrong:
        # (?<host>[^\/^:^"]+.*?) (далее заменяю только выражение в квадратных скобках)
        # [^\/^:^"]+
        # [^\/^:^"]*
        # [\w\d\-\~\.]+
        # accepted: (убирайте точку как символ)
        # [\w\d\-\~]+
        # [^\/^:^"^.]+
        push(@ve, $+{host});
    }
}

$prev = "";

for (sort @ve) {
  if (!($_ cmp $prev)){
  } else {
      print $_."\n";
      $prev = $_;
  }
}
